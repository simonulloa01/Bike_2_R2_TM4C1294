include "helpers.saw";
import "bike2_test.cry";

// Prior to running the verification be sure to have all the valid files. 
// These include the .bc/.saw/.c/.cry

print "Loading the bike2_test module";
bike2_test_bc <- llvm_load_module "bike2_test.bc";

let modAdd_spec = do {
  // Create symbolic integers and pointers to them.
  (a, ap) <- ptr_to_fresh "a" (llvm_int 8);
  (b, bp) <- ptr_to_fresh "b" (llvm_int 8);

  // Execute the function with the pointer parameters.
  llvm_execute_func [ap, bp];

  // Use Cryptol to specify the desired return value.
  let modAdd_res = {{ modAdd (a, b) }};
  llvm_return (llvm_term {{ modAdd_res }});
};

// Verify C function modAdd using modAdd_spec.
llvm_verify bike2_test_bc "modAdd" [] true modAdd_spec yices;

// Meant to test both our multiplication and modular poly arithemetic.
let modMult_spec = do {
  // Create symbolic integers and pointers to them.
  (x, xp) <- ptr_to_fresh "x" (llvm_int 8);
  (y, yp) <- ptr_to_fresh "y" (llvm_int 8);

  // Execute the function with the established parameters.
  llvm_execute_func [xp,yp];

  // Use Cryptol to specify the desired return value.
  let modMult_res = {{ modMult (x,y) }};
  llvm_return (llvm_term {{ modMult_res }});
};

// Verify C function modAdd using modMult_spec.
llvm_verify bike2_test_bc "modMult" [] true modMult_spec yices;

// Verify the Key Generation function.
let keyGen_spec = do {
  // Create symbolic integers and pointers to them.
  (h0, h0p) <- ptr_to_fresh "h0" (llvm_int 8);
  (h1, h1p) <- ptr_to_fresh "h1" (llvm_int 8);

  // Execute the function with the established parameters.
  llvm_execute_func [h0p,h1p];

  // Use Cryptol to specify the desired return value.
  let res = {{ keyGen (h0,h1) }};
  llvm_return (llvm_term {{ res }});
};

// Verify C function keyGen using keyGen_spec.
llvm_verify bike2_test_bc "keyGen" [] true keyGen_spec yices;

print "Done.";
